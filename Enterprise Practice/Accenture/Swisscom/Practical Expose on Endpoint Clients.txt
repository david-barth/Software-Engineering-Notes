Enterprise Development Practical Expose: HTTP Clients. 


Introduction: 

---> In this case, an "endpoint client" is simply an HTTP client that provides an interface to perform HTTP requests without needing to write up the implementation code to individual perform each step of the request call. 

	---> Therefore, the client is simply an encapsulation of the methods and objects that are needed in order to perform the necessary HTTP actions. 

	---> This encapsulation allows for one line method calls in order to perform the HTTP requests / calls.               



---> There are several examples of such clients: 

	A. HTTP clients generated by Swagger codegen

	B. Feign client (Spring Open Feign) 

	C. Other clients that exist within the Spring ecosystem. 

	---> The choice of client used here is the FeignClient developed by Netflix. 



Basics of the FeignClient: 

---> Feign client is an HTTP API client that allows a developer to annotate an interface with @FeignClient, which designates the interface as an HTTP client. 

	---> The annotated interface is implemented into an HTTP client at runtime via reflection and an annotation consumer. 


---> The steps for configuring Spring open Feign is as follows: 

	1. Add the following dependency to the pom.xml: 

	<dependency>
    		<groupId>org.springframework.cloud</groupId>
    		<artifactId>spring-cloud-starter-openfeign</artifactId>
	</dependency>


	2. Add Spring-cloud-dependencies to the pom.xml: 

	<dependencyManagement>
     		<dependencies>
         		<dependency>
            			<groupId>org.springframework.cloud</groupId>
            			<artifactId>spring-cloud-dependencies</artifactId>
            			<version>${spring-cloud.version}</version>
            			<type>pom</type>
            			<scope>import</scope>
        		</dependency>
    		</dependencies>
	</dependencyManagement>


		---> The purpose of <dependencyManagement needs to be specified later. 

	
	3. Add @EnableFeignClients to add component scanning for the Feign client interfaces to occur:                                 

	@SpringBootApplication
	@EnableFeignClients
	public class ServerApplication {
    		public static void main(String[] args) {
        		SpringApplication.run(ServerApplication.class, args);
    		}
	}       



---> The basic usage is as follows: 


	@FeignClient(value = "jplaceholder", url = "https://jsonplaceholder.typicode.com/")
	public interface JSONPlaceHolderClient {

    		@RequestMapping(method = RequestMethod.GET, value = "/posts")
    		List<Post> getPosts();

    		@RequestMapping(method = RequestMethod.GET, value = "/posts/{postId}", produces = "application/json")
    		Post getPostById(@PathVariable("postId") Long postId);
	}


	---> The @FeignClient has the following basic properties in this example: 

		---> "value" denotes the bean ID that is used for the Feign client bean when it is icreated at runtime.                

		---> "url" represents the base URL (and hence namespace) that the client is covering.  


	---> Normal Spring MVC annotations such as @RequestMapping and its subvariants can also be used.  
	


---> Each FeignClient interface can also be customized with a configuration class.  The following components are configurable: 

	A.  Decoder – ResponseEntityDecoder, which wraps SpringDecoder, used to decode the Response

	B.  Encoder – SpringEncoder is used to encode the RequestBody.

	C.  Logger – Slf4jLogger is the default logger used by Feign.

	D.  Contract – SpringMvcContract, which provides annotation processing

	E.  Feign-Builder – HystrixFeign.Builder is used to construct the components.

	F.  Client – LoadBalancerFeignClient or default Feign client
	

	                                                               