Theory and Practice 1: Brief Introduction to MongoDB Principles. 


Introduction: 

---> MongoDB is a NoSQL (Other than SQL) database and is known as a document oriented database. 

---> The following components are the essential components to MongoDB: 

	A. Documents => These consist of key-value pairs and are the basic unit of data in MongoDB.

		---> A document is functionally equivalent to a row / record in a relational database. 

		---> Each document within a collection can be different with a varying number of fields. 

		---> Additionally, the size and content of each document within a collection can b edifferent from each other. 

		---> Documents also do not need to have a schema to enforce their structure, but schema can optionally be used.


	B. Collection => This is a set of documents (key value pairs) and are the functional equivalient to tables within a traditional relational database. 


	---> Given the above, hierarchal data fits into the data model of MongoDB far more easily than relational databases. 
		
		---> This allows complex data structures (e.g. arrays and objects) to be persisted more easily. 


---> A MongoDB database is therefore organised into sets of collections, which in turn contain sets of documents per each collection. 

---> Important: The following represents a basic example of a document within a MongoDB database: 

	{
		_id: <ObjectId>, 
		CustomerName: "Something", 
		Order: {
			...
		}
	}   

	---> The notation for document storage follows the syntax of JSON very closely, allowing for a high level of correspondence between MongoDB and JSON based encodings. 

	---> Note: _id is equivalent to the primary key that is used in SQL based databases in that this uniquely identifies the document in a collection. 

	---> Important: The storage of an inner object (ie Order here) would normally be represented by a foreign key relationship between 2 separate tables within a relational database. 

		---> However, in the document format, the inner object can be stored in a hierarchal fashion within the same collection and document. 



Key Components of MongoDB Architecture: 

---> The following represent the key components to MongoDB database architecture: 

	A. _id => This is the equivalent of a primary key and uniquely identifies every MongoDB document. 

		---> This is either created manually or auto-generated by MongoDB. 


	B. Collection => This is equivalent to a table and is a grouping of documents. 

		---> A collection exists within a single database. 

		---> Collectons don't enforce any structure. 


	C. Cursor => This is a pointer to the result set of a query.

		---> It is possible to iterate through a cursor to retrieve results. 


	D. Database => This is the container for collections (same for relational systems). 

		---> On MongoDB, each DB gets its own set of files and a single MongoDB server can store multiple databases. 

		---> Note: A DB server in general can store multiple databases. 


	E. Document => This is the implementation of a record in a MongoDB colleciton. 

		---> It is equivalent to a row and consists of a grouping of key:value pairs representing data. 


	F. Field => This is the key:value pair in a document and is equivalent to a column in relational databases. 

		---> A document can have 0 or more fields. 


	G. Indexes => Indexes can be created to improve the performance of searches in MongoDB. 

		---> The index is a data structure (e.g. a B tree) that can be used to provide an in-memory representation of data, which allows for quicker querying rather than retrieving the data from hard disk space. 

			---> The quicker access performance of indexes make them suited fo ruse in heavy query loads.  

		---> Any field within MongoDB can be indexed. 

	
	F. Ad hoc queries => MongoDB also supports various types of searches including by field, range queries, and regular expression searches. 

		---> Queries can even be made to return specific fields within documents. 


MongoDB Query Language: 

---> MongoDB can be used with the MongoShell or Compass in order to perform DB level operations on Collections. 

---> A basic list of Mongo Shell commands are: 

    	db.help()                    help on db methods
        db.mycoll.help()             help on collection methods
        sh.help()                    sharding helpers
        rs.help()                    replica set helpers
        help admin                   administrative help
        help connect                 connecting to a db help
        help keys                    key shortcuts
        help misc                    misc things to know
        help mr                      mapreduce

        show dbs                     show database names
        show collections             show collections in current database
        show users                   show users in current database
        show profile                 show most recent system.profile entries with time >= 1ms
        show logs                    show the accessible logger names
        show log [name]              prints out the last segment of log in memory, 'global' is default
        use <db_name>                set current database
        db.mycoll.find()             list objects in collection mycoll
        db.mycoll.find( { a : 1 } )  list objects in mycoll where a == 1
        it                           result of the last line evaluated; use to further iterate
        DBQuery.shellBatchSize = x   set default number of items to display on shell
        exit                         quit the mongo shell 



---> Note that object based notation is used in MongoShell querying language. 

	---> There are several different objects: db, collections, documents etc. 

	---> On each object there is a help() method (or just a "help" command) for various levels of help or methods available on the object. 



---> Shorthand articles to explore for shell commands and assistance: 

	1. https://www.digitalocean.com/community/tutorials/how-to-use-the-mongodb-shell

		---> Simple how to on Mongo Shell commands. 

	

Principles of basic CRUD operations: 

---> Within Spring Data for MongoDB, the main object that is used for entity persistence is the MongoTemplate class. 

---> This class contains the operations needed to perform basic CRUD operations: 

	A. insert() => This allows for writing a new document to the database, either as a single record or a list of records. 

	B. find() => Retrieves an existing documents or groups of documents based on a query or an id. 

	C. update() => Updates a document with new data, based on a query.   

	D. remove() => Removes documents either based on a query or by removing based on a query or by collection name. 



---> Articles for basics on various MongoTemplate CRUD operations: 

	1. https://www.baeldung.com/spring-data-mongodb-tutorial

		-> Basic overview of the various CRUD operations. 

	
	2. https://www.baeldung.com/spring-data-mongodb-transactions

		-> Approaches to transaction considerations with Spring Data + MongoDB. 




