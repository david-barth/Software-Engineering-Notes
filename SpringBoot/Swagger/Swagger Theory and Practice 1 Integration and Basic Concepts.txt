Swagger Theory and Practice 1: Integration and Basic Concepts




Introduction: Basic Building Blocks

---> Swagger is a toolset that can be used to generate interactive documentation of REST APIs. 

---> Swagger consists of the following 3 components: 

	A. The OpenAPI definition

	B. Swagger UI 

	C. Swagger Codegen


---> Through use of the OpenAPI definition and Swagger UI, it is possible to generate the documentation noted above. 

	---> Swagger generates a JSON representation of the documentation that describes the REST API it is covering. 

	---> This JSON representation is accessible by the following endpoint: http://localhost:8080/v2/api-docs

	---> This JSON representation is consumed by a frontend client that presents the documentation as UI (generated by Swagger UI).

	---> The URL for accessing this is: http://{Base URL}/swagger-ui/ 

		---> In the case of localhost, this is: http://localhost:8080/swagger-ui/

		---> Note: The ending / must be included unless specialized configuration is given. 


---> Swagger Codegen allows for the generation of certain pieces of code such as HTTP client code, models, and more. 

---> Each of these are explored in turn. 



Introduction: OpenAPI Definition. 

---> The OpenAPI definition is a JSON or YAML file that is used to describe the RESTful API that is being implemented. 

---> OpenAPI itself is a language agnostic interface that is machine and human readable.

	---> This allows the capabilities of a service to be understood without thorough inspection of source code, documentation or network traffic inspection. 


---> In JSON format, the file can be obtained as follows: 

	1. Get the JSON response from http://{Base URL}/v2/api-docs

	2. Save the file as a .json file under an appropriate package, such as resources. 

	3. Use the file for purposes such as Swagger codegen. 


Introduction: Swagger UI. 

---> Swagger UI is a collection of HTML, JS, and CSS assets that allows for the interactive documentation to be generated. 

---> The documentation is effectively a static resource that is served from a URL, which can be chosen from application startup. 

---> The documnetation provides easy access to the following basic pieces of information: 

	A. API contracts 

	B. Endpoints

	C. Data models 



Introduction: Swagger Codegen. 

---> Swagger Codegen is a Java application that can use the OpenAPI JSON / YAML document to generate HTTP client SDKs in various langauges. 

---> Client Codegen allows for the HTTP clients to be generated for easy use in various parts of a service (e.g. tests) or in consumers of the service.  

---> Codegen can be configured to run via commandline, Gradle, or Maven. 





Integration with Maven: 

---> The integration of Swagger with Maven primarily includes the use of a plugin called: swagger-codegen-maven-plugin. 

---> This allows for Swagger codegen to be used with Maven following these steps: 

	1. mvn clean compile 

	2. mvn clean package 

	---> This allows for models, clients, and other classes to be generated by Swagger codegen. 


---> However, in order to properly use the Maven plugin some more considerations must be given. 

	---> The first is the plugin configuration: 

  	    <plugin>
                <groupId>io.swagger.codegen.v3</groupId>
                <artifactId>swagger-codegen-maven-plugin</artifactId>
                <version>3.0.34</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.basedir}/src/main/resources/api.json</inputSpec>
                            <language>java</language>
                            <generateApiTests>false</generateApiTests>
                            <generateModelTests>false</generateModelTests>
                            <configOptions>
                                <sourceFolder>src/gen/java/main</sourceFolder>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

	 	---> The above configuration relies on having the following dependency in the pom.xml: 

		   <dependency>
            		<groupId>io.swagger.codegen.v3</groupId>
            		<artifactId>swagger-codegen-maven-plugin</artifactId>
           		<version>3.0.34</version>
        	   </dependency>

			---> This dependency must match the corresponding plugin tags in order to be successfully used. 


		---> The <execution> tags within the <executions> tags specify different executions of the plugin to be run at the project's compile time. 

			---> In this case, the execution is for an action called "generate" specified within the <goals> + <goal> tags. 

			---> Note: The <goal> specifies the effective command that is run within the plugin. 

				---> In this sense, the plugin goals represent different commandline commands that can be executed by Maven with respect to the interal dependencies that the plugin is targeting. 
		
				---> More of this can be focused on in a separate set of notes devoted to Maven plugin theory in particular. 

		
		---> The <configuration> tags specifies the configurations options available to specify how the execution of the plugin goal is done. 

 
		---> In this above configuration, there are several important points to consider for Swagger codegen: 

			A. <inputSpec> => This tag represents the OpenAPI definition that is generated by Swagger and used by Swagger UI in order to create the documentation UI that is created. 

			B. <sourceFolder> => This tag represents the location of the source code that is targeted by Swagger in order to generate the API documentation. 

			C. <configOptions> => This defines configuration options that are framework-specific generation options.

				---> Options related to langauge, output directory, and more can be specified here. 			
	
				---> Tags that are outside of <configOptions>, but in <Configuration> represent global options used by all framework generators.

				---> Note: The term framework generator will have to be specified later. 


		---> Important: The default output directory is in generated-sources of the target directory for a Maven project. 

			---> A "swagger" package will be generated here which contains the generated code (HTTP clients, models, etc), the documentation, and configuration files (pom.xml and gradle build files). 

			---> In a Maven project, there is an error for compiling the main project in which key dependencies (related to Swagger) will be missing. 

				---> These dependencies are found in the pom.xml of the generated swagger package in the target directory of the Maven project. 

				---> As a quick workaround to this issue, the dependencies and their version numbers can be placed into the main project pom.xml dependencies and property numbers. 

			
---> Also of importance is the OpenAPI definition file.  

	---> The <InputSpec> tag requires the relative path to the file, which can be a .json or a .yml file. 

	---> In both cases, this file will have to be referenced within <InputSpec> in order to allow Swagger to consume the OpenAPI specification of the project. 

	---> In certain cases, the "host" property of the JSON definition file will not have the protocol attached to it, so this will need to be manually added. 

	---> .yml file definition files and the ability to configure according to different profiles + environments will be expanded on soon here. 

		---> Different profiles refers to build configurations for different environments such as production, preprod, staging, etc. 





			


